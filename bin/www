#!/usr/bin/env node

let debug = require('debug')('app:server');
let config = require('../config');
let http = require('http');

/**
 * Initiate Redis storage and load models.
 * All content is stored in Redis.
 *
 */
let caminte = require('caminte'),
    Schema = new caminte.Schema('redis', config.redis),
    User = require('../entities/schemas/user')(Schema),
    Message = require('../entities/schemas/message')(Schema);

require('../entities/schemas/relations')(Schema);

let app = require('../boot/http')(Schema);

/**
 * Get port from environment and store in Express
 */
let port = normalizePort(config.global.port || 8081);
    app.set('port', port);
    app.locals.author = config.global.author;

/**
 * Creating HTTP server
 */
let server = http.createServer(app);

/**
 * Attaching HTTP server to an WebSocket engine
 */
let socket = require('../boot/io')(server, Schema);

/**
 * Listening on provided port, on all network interfaces
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort (value) {
    let port = parseInt(value, 10);

    if (isNaN(port)) {
        return value;
    }

    if (port >= 0) {
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError (error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening () {
    let address = server.address();
    let bind = typeof address === 'string' ? 'pipe ' + address : 'port ' + address.port;

    debug('Listening on ' + bind);
}